"""
Created by Xuejian Ma at 6/18/2020.
All rights reserved.
"""
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


def readTXT(filePath):
    """
    Read diffusion data in default txt file to a 2d numpy array.
    :param filePath: txt file generated by Labview diffusion measurement GUI. Default name is "Ch1 retrace.txt" etc.
    :return: 2d array of the diffusion data in the txt file
    """
    f1 = open(filePath)
    data = f1.read()[:-1]
    lines = data.split("\n")
    matrix = []
    for line in lines:
        matrix.append(np.array(line.split("\t")).astype(float))
    return np.asarray(matrix)


def readImRePhase(filePathImList, filePathReList,scale):
    """
    Read im and re diffusion files into 1d arrays for phase diagram. Phase diagram is for comparison with simulated
    Im and Re curves by COMSOL.
    :param filePathImList: must have the same length with filePathReList correspondingly.
    :param filePathReList: must have the same length with filePathImList correspondingly.
    :param scale: scale to the raw data. Usually the raw data are in V. To convert them to mV, we need scale=1000.
    :return: 1d array im_all, and 1d array re_all, with only voltage information (no coordinates information)
    """
    if len(filePathReList) != len(filePathImList):
        raise ValueError("filePathReList and filePathImList must have the same length, also with correspondence.")
    im_all = []
    re_all = []
    for filePathIm, filePathRe in zip(filePathImList, filePathReList):
        im = readTXT(filePathIm)
        im_all += list(np.array(im).reshape(1, -1)[0]*scale)
        re = readTXT(filePathRe)
        re_all += list(np.array(re).reshape(1, -1)[0]*scale)
    return im_all, re_all


def plotImRePhase(filePathImList, filePathReList, saveFigPath):
    """
    Read and Plot im and re diffusion files into 1d arrays for phase diagram. Phase diagram is for comparison with simulated
    Im and Re curves by COMSOL.
    :param filePathImList: must have the same length with filePathReList correspondingly.
    :param filePathReList: must have the same length with filePathImList correspondingly.
    :param saveFigPath: path to save the phase diagram.
    :return: None
    """
    im_all, re_all = readImRePhase(filePathImList, filePathReList)
    plt.plot(np.array(im_all), np.array(re_all), ".")
    plt.savefig(saveFigPath + '/imRePhase.png')
    return None


def readSimulatedImReCSV(filePath,scale):
    '''
    Read the simulated im re curves generated by COMSOL.
    :param filePath: csv file from COMSOL, which contains columns of conductivity, im and re signals.
    :param scale: convert from COMSOL unit to mV.
        scale = 3.5*10 for diffusion. 3.5 is the default calibrated coefficient,
            10 is multiplied to fit the signal amplification of lock-in.
        scale=  3.5/1000*125 for TR-iMIM signals. 3.5 is still default calibrated coefficient, factor of 125/1000 is
            multiplied since 3.5 is for a 1000x DC amplifier, while TR-iMIM uses the amplifier with 125x instead.
    :return: cond_array as x-axis, im_sim, re_sim as y-values
    '''
    df = pd.read_csv(filePath, error_bad_lines=False, skiprows=4)  # Untitled_632
    # diffusion simulation file chosen: Untitled_R28_1degree.csv
    # Tr simulation file chosen: tr2.csv
    cond_array = df.iloc[:, 0]
    # im_sim_raw = df.iloc[:,1]*3.5*10
    # re_sim_raw = df.iloc[:,2]*3.5*10
    im_sim_raw = df.iloc[:, 1]*scale# * 3.5 / 1000 * 125
    re_sim_raw = df.iloc[:, 2]*scale# * 3.5 / 1000 * 125
    im_sim = im_sim_raw - np.min(im_sim_raw)
    re_sim = re_sim_raw - np.min(re_sim_raw)
    return cond_array, im_sim, re_sim


def plotSimulatedImReCurves(filePath, saveFigPath,scale):
    '''
    Plot the simulated im re curves generated by COMSOL.
    :param filePath: csv file from COMSOL, which contains columns of conductivity, im and re signals.
    :param saveFigPath: path to save the curves.
    :param scale: see readSimulatedImReCSV().
    :return: None
    '''
    SMALL_SIZE = 8
    MEDIUM_SIZE = 20
    BIGGER_SIZE = 22
    plt.rc('font', size=MEDIUM_SIZE)  # controls default text sizes
    plt.rc('axes', titlesize=BIGGER_SIZE)  # fontsize of the axes title
    plt.rc('axes', labelsize=BIGGER_SIZE)  # fontsize of the x and y labels
    plt.rc('xtick', labelsize=BIGGER_SIZE)  # fontsize of the tick labels
    plt.rc('ytick', labelsize=BIGGER_SIZE)  # fontsize of the tick labels
    plt.rc('legend', fontsize=MEDIUM_SIZE)  # legend fontsize
    plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
    plt.rc('axes', linewidth=2)
    plt.rc('xtick.major', size=5, width=3)
    plt.rc('ytick.major', size=5, width=3)
    cond_array, im_sim, re_sim = readSimulatedImReCSV(filePath,scale)
    plt.figure()
    plt.xscale('log')
    # plt.xlim(1e-7,7e6)
    # plt.plot(cond_array,im_sim,'.')
    # plt.plot(cond_array,re_sim,'.')
    plt.plot(cond_array, im_sim, color='red', linewidth=6, label="iMIM-Im")
    plt.plot(cond_array, re_sim, color='green', linewidth=6, label="iMIM-Re")
    plt.xlabel("Local Ïƒ (nS)")
    plt.ylabel("Simulated Signals (mV)")
    plt.legend()
    plt.tight_layout()
    plt.savefig(saveFigPath + "/simulatedImReCurves.png")
    return None


def plotSimulatedImReCurves_Linear(filePath, saveFigPath, maxPos=107, maxTick=12, tickStep=2):
    '''
    Plot the simulated im re curves generated by COMSOL in the LINEAR SCOPE.
    :param filePath: csv file from COMSOL, which contains columns of conductivity, im and re signals.
    :param saveFigPath: path to save the curves.
    :param maxPos: see below for details.
    :param maxTick: see below for details.
    :param tickStep: see below for details.
    :return: None
    '''
    cond_array, im_sim, re_sim = readSimulatedImReCSV(filePath)
    rc = list(range(0, maxPos))
    plt.figure()
    plt.plot(cond_array[rc], im_sim[rc], color='red', linewidth=10, label="iMIM-Im")
    plt.plot(cond_array[rc], re_sim[rc], color='green', linewidth=10, label="iMIM-Re")
    plt.xticks(list(range(0, maxTick, tickStep)))
    plt.savefig(saveFigPath + "/simulatedImReCurves_Linear.png")
    return None

def plotPhaseAndSimulatedCurves(im_all,re_all,im_sim, re_sim,saveFigPath):
    """
    Plot both phase diagram and simulated im re curves in one figure, in order to see the quality of simulation.
    :param im_all: from readImRePhase()
    :param re_all: from readImRePhase()
    :param im_sim: from readSimulatedImReCSV()
    :param re_sim: from readSimulatedImReCSV()
    :param saveFigPath: path to save the figure.
    :return: None
    """
    plt.figure()
    plt.plot(np.array(im_all), np.array(re_all), ".")
    plt.plot(im_sim, re_sim)
    plt.savefig(saveFigPath+"/phaseAndSimulatedCurves.png")
    return None

